name: Front Deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    name: yarn build & deploy
    runs-on: ubuntu-latest

    steps:
      # 레포지토리에 접근하여 CI서버로 코드를 내려받는 과정입니다.
      - name: Checkout repository
        uses: actions/checkout@v3

      # Corepack 활성화 및 yarn 버전 설정
      - name: Enable Corepack
        run: corepack enable

      - name: Set yarn version
        run: corepack prepare yarn@3.3.1 --activate

      # workflow가 실행될 때 필요한 파일 중에서 거의 바뀌지 않는 파일들을 GitHub의 캐시에 올려놓고 CI 서버로 내려받습니다.
      # 프로젝트에서 자주 바뀌지 않는 수많은 패키지를 매번 다운받아 올리면 시간도 오래걸리고 네트워크 대역폭을 많이 사용하게됩니다.
      - name: Get yarn cache directory
        id: yarn-cache-dir
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # yarn dependencies 설치
      - name: Install yarn dependencies
        run: yarn install

      # vite를 사용하여 빌드
      - name: Build with Vite
        run: yarn build

      # 빌드된 파일을 배포하는 단계 (예: GitHub Pages 사용 시)
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
